AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: >
  cadence-sync

  Sample SAM Template for cadence-sync

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 120

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: prod
      Auth:
        ApiKeyRequired: true
      DefinitionBody:
        swagger: "2.0"
        info:
          title: !Ref AWS::StackName
        x-amazon-apigateway-request-validators:
          body-only:
            validateRequestBody: true
            validateRequestParameters: false
          params-only:
            validateRequestBody: false
            validateRequestParameters: true
        x-amazon-apigateway-request-validator: body-only
        paths:
          "/":
            post:
              consumes:
                - "application/json"
              produces:
                - "application/json"
              responses:
                "200":
                  description: "200 response"
                  schema:
                    $ref: "#/definitions/Empty"
              security:
                - token-authorizer: []
              parameters:
                - in: body
                  name: StartSyncBody
                  required: true
                  schema:
                    $ref: "#/definitions/StartSyncBody"
              x-amazon-apigateway-request-validator: body-only
              x-amazon-apigateway-integration:
                credentials: !GetAtt ApiGatewayRole.Arn
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:sqs:path//"
                responses:
                  default:
                    statusCode: "200"
                requestParameters:
                  integration.request.header.Content-Type: "'application/x-www-form-urlencoded'"
                requestTemplates:
                  application/json:
                    !Sub "Action=SendMessage##\n&QueueUrl=$util.urlEncode('${CadenceSyncQueue}')##\n\
                    &MessageBody=$util.urlEncode($input.body)##\n"
                passthroughBehavior: "never"
                httpMethod: "POST"
                type: "aws"
        definitions:
          Empty:
            type: object
            title: Empty
          StartSyncBody:
            title: StartSyncBody
            type: object
            properties:
              calendarType:
                type: string
              userId:
                type: string
            required:
              - calendarType
              - userId

  ApiGatewayRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: CadenceSyncQueuePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:SendMessage
                Resource: !GetAtt CadenceSyncQueue.Arn

  # This is an SQS queue with all default configuration properties. To learn more about the available options, see
  # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-sqs-queues.html
  CadenceSyncQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: "cadence-sync-queue"
      VisibilityTimeout: 150
  CadenceSyncFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: .
      Handler: index.handler
      Runtime: nodejs18.x
      Architectures:
        - x86_64
      # This property associates this Lambda function with the SQS queue defined above, so that whenever the queue
      # receives a message, the Lambda function is invoked
      Events:
        SQSQueueEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt CadenceSyncQueue.Arn
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        Sourcemap: true
        EntryPoints:
          - src/index.ts

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  # CadenceSyncApi:
  #   Description: "API Gateway endpoint URL for prod Cadence sync function"
  #   Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/sync/"
  CadenceSyncFunction:
    Description: "Cadence sync Lambda function ARN"
    Value: !GetAtt CadenceSyncFunction.Arn
  CadenceSyncFunctionIamRole:
    Description: "Implicit IAM Role created for Cadence sync function"
    Value: !GetAtt CadenceSyncFunctionRole.Arn
